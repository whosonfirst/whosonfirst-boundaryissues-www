#!/bin/sh -e

### BEGIN INIT INFO
# Provides:          whosonfirst-boundaryissues-server.sh
# Required-Start:    $remote_fs $syslog
# Required-Stop:     $remote_fs $syslog
# Default-Start:     2 3 4 5
# Default-Stop:      0 1 6
# Short-Description: Start daemon at boot time
# Description:       Enable service provided by daemon.
### END INIT INFO

# Starts, stops, and restarts the event wof-spatial-server
# http://werxltd.com/wp/2012/01/05/simple-init-d-script-template/

# To make sure this runs at startup, do:
# update-rc.d whosonfirst-boundaryissues-server.sh defaults

GUNICORN_APP_NAME='server'
GUNICORN_APP_ROOT='YOUR-WHOSONFIRST-WWW-BOUNDARYISSUES-WWW-ROOT-GOES-HERE'
GUNICORN_CONFIG='YOUR-WHOSONFIRST-WWW-BOUNDARYISSUES-GUNICORN-CONFIG-GOES-HERE'
GUNICORN_PID_NAME='whosonfirst-boundaryissues-server'

GUNICORN=`which gunicorn`
GUNICORN_OPTS="-c ${GUNICORN_CONFIG}"
GUNICORN_USER="www-data"

PIDFILE=/var/run/${GUNICORN_PID_NAME}.pid

case $1 in
    debug)

	cd ${GUNICORN_APP_ROOT} 
        echo "Starting ${GUNICORN_APP_NAME} (in debug mode)"

	echo sudo -u ${GUNICORN_USER} $GUNICORN $GUNICORN_OPTS ${GUNICORN_APP_NAME}:app
	sudo -u ${GUNICORN_USER} $GUNICORN $GUNICORN_OPTS ${GUNICORN_APP_NAME}:app

        ;;
    start)

	cd ${GUNICORN_APP_ROOT} 
        echo "Starting ${GUNICORN_APP_NAME}"

	PID=`exec sudo -u ${GUNICORN_USER} $GUNICORN $GUNICORN_OPTS ${GUNICORN_APP_NAME}:app > /dev/null 2>&1 & echo $!`
	echo "PID: ${PID}"

	cd -

        if [ -z $PID ]; then
            printf "%s\n" "Fail"
        else
            echo $PID > $PIDFILE
            printf "%s\n" "Ok"
	            echo $PID
        fi

        ;;
    stop)
        echo "Stopping ${GUNICORN_APP_NAME}"

	printf "%-50s" "Stopping ${GUNICORN_APP_NAME}"
            PID=`cat $PIDFILE`
            cd $DAEMON_PATH
        if [ -f $PIDFILE ]; then
            kill -TERM $PID
            printf "%s\n" "Ok"
            rm -f $PIDFILE
        else
            printf "%s\n" "pidfile not found"
        fi

        ;;
    restart)
        $0 stop
        $0 start
        ;;
    status)
        printf "%-50s" "Checking ${GUNICORN_APP_NAME}..."
        if [ -f $PIDFILE ]; then
            PID=`cat $PIDFILE`
            if [ -z "`ps axf | grep ${PID} | grep -v grep`" ]; then
                printf "%s\n" "Process dead but pidfile exists"
            else
                echo "Running"
            fi
        else
            printf "%s\n" "Service not running"
        fi
	;;
    *)
        echo "Usage: $0 {debug|start|stop|restart|status}" >&2
        exit 1
        ;;
esac
