#!/bin/sh -e

### BEGIN INIT INFO
# Provides:          wof-pip-server.sh
# Required-Start:    $remote_fs $syslog
# Required-Stop:     $remote_fs $syslog
# Default-Start:     2 3 4 5
# Default-Stop:      0 1 6
# Short-Description: Start daemon at boot time
# Description:       Enable service provided by daemon.
### END INIT INFO

# Stuff you will need to edit

WOF_DATA=__WHOSONFIRST_DATA__
WOF_META=__WHOSONFIRST_METAFILES__

PIP_USER=__PIPSERVER_USER__
PIP_DAEMON=__PIPSERVER_DAEMON__

PIP_ARGS="__PIPSERVER_ARGS__"

# Okay - you shouldn't need to edit anything after this

PIP_ARGS="-data ${WOF_DATA} ${PIP_ARGS} ${WOF_META}"

PID_PATH=/var/run/
PID_NAME=`basename ${PIP_DAEMON}`
PID_FILE=${PID_PATH}${PID_NAME}.pid

if [ "$(id -u)" != "0" ]; then
    echo "This script must be run as root" 1>&2
    exit 1
fi

case $1 in
    debug)

        echo "Starting ${PID_NAME} in debug mode w/ options: ${PIP_ARGS}"
        exec sudo -u $PIP_USER $PIP_DAEMON $PIP_ARGS
        ;;
    start)

    if [ -e "${PID_FILE}" ]; then
            echo "Error! ${PID_NAME} is currently running!" 1>&2
            exit 1
	    fi

        echo "Starting ${PID_NAME} w/ options: ${PIP_ARGS}"
        PID=`exec sudo -u $PIP_USER $PIP_DAEMON $PIP_ARGS  > /dev/null 2>&1 & echo $!`

        if [ -z $PID ]; then
            printf "%s\n" "Fail"
        else
            echo $PID > $PID_FILE
            printf "%s\n" "Ok"
	        echo $PID
        fi

        ;;
    stop)

    printf "%-50s" "Stopping $PID_NAME"
        PID=`cat $PID_FILE`

        if [ -f $PID_FILE ]; then
            kill -HUP $PID
            printf "%s\n" "Ok"
            rm -f $PID_FILE
        else
            printf "%s\n" "pidfile not found"
        fi

        ;;
    restart)
        $0 stop
        sleep 1
        $0 start
        ;;
    *)
        echo "Usage: $0 {start|stop|restart|debug}" >&2
        exit 1
        ;;
esac
